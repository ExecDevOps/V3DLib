/////////////////////////////////////////////////////////////////////////////////////////////////////
// Unit tests using the Catch(2) framework.
//
// This file serves as a placeholder for main(), which is generated by Catch.
// General unit tests could be added here.
//
// This is a good place to put simple, global tests.
//
// See the tutorial for an overview: https://github.com/catchorg/Catch2/blob/master/docs/tutorial.md
// This also links to the reference pages.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"
#include <cstdlib>
#include "../Lib/Target/Emulator.h"  // MAX_QPUS
#include "../Lib/Support/Platform.h"
#ifdef QPU_MODE
#include "../Lib/vc4/RegisterMap.h"
#include "../Lib/v3d/RegisterMapping.h"

using RegMap = QPULib::RegisterMap;
#endif  // QPU_MODE


#ifdef QPU_MODE

TEST_CASE("Test correct working of RegisterMap", "[regmap]") {

	SECTION("Check num QPU's") {
		if (Platform::instance().has_vc4) {
			REQUIRE(MAX_QPUS == RegMap::numSlices()*RegMap::numQPUPerSlice());
		} else {
			printf("Checking num QPU's v3d\n");
			const int MAX_QPUS_V3D = 8;

			QPULib::v3d::RegisterMapping map_v3d;
			map_v3d.init();
			REQUIRE(1 == map_v3d.num_cores());  // This is a canary; warn me if this ever changes
			REQUIRE(MAX_QPUS_V3D == map_v3d.info_per_core(0).num_qpu);
		}
	}
}

#endif  // QPU_MODE
