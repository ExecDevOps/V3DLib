Source code
===========

v0 = UNIFORM;
v1 = UNIFORM;
v2 = UNIFORM;
TMU0_ADDR = (v2+(ELEM_NUM << 2));
TMU0_ADDR = ((v2+64)+(ELEM_NUM << 2));
receive(v3)
receive(v4)
*v2 = (v3+v4);

Target code
===========

0: A0 <- or(S[UNIFORM], S[UNIFORM])
1: B0 <- or(S[UNIFORM], S[UNIFORM])
2: A0 <- or(S[UNIFORM], S[UNIFORM])
3: ACC1 <- shl(S[ELEM_NUM], 2)
4: S[TMU0_S] <- add(A0, ACC1)
5: ACC1 <- 64
6: A1 <- add(A0, ACC1)
7: ACC1 <- shl(S[ELEM_NUM], 2)
8: S[TMU0_S] <- add(A1, ACC1)
9: TMU0_TO_ACC4
10: B0 <- or(ACC4, ACC4)
11: TMU0_TO_ACC4
12: ACC1 <- or(ACC4, ACC4)
13: A1 <- add(B0, ACC1)
14: B0 <- 16
15: NOP
16: ACC0 <- or(B0, B0)
17: B0 <- add(ACC0, S[QPU_NUM])
18: ACC1 <- 4608
19: S[WR_SETUP] <- or(B0, ACC1)
20: A2 <- 256
21: NOP
22: A2 <- add(A2, S[QPU_NUM])
23: S[WR_SETUP] <- -1073741824
24: B0 <- -2013184000
25: ACC1 <- shl(A2, 3)
26: S[WR_SETUP] <- or(B0, ACC1)
27: S[VPM_WRITE] <- shl(A1, 0)
28: S[DMA_ST_ADDR] <- or(A0, A0)
29: where never: _ <- or(S[DMA_ST_WAIT], S[DMA_ST_WAIT])
30: END
31: NOP
32: NOP
33: NOP

